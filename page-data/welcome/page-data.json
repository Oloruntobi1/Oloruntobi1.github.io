{"componentChunkName":"component---src-templates-post-js","path":"/welcome/","result":{"data":{"site":{"siteMetadata":{"title":"Askari blog","author":"Balogun Tobi Adisa"}},"markdownRemark":{"html":"<h1>Hi there!</h1>\n<p><strong>Should you be here?</strong> Yes, if you want to learn GraphQL you should. But more importantly, if you need mentorship per se on what is boggling you down right now as a developer, like what you are struggling with for now...you can always hit me up via my Twitter--i'll try my best to respond as fast as possible (yes, i'm on break. So grab this opportunity!) and subsequently recommend materials for you if its too tough for me to handle.</p>\n<p>So, yes GraphQL! What is it? Why should you learn it? </p>\n<blockquote>\n<p><em>Oh, its new and theres buzz around it thats why...duh</em></p>\n</blockquote>\n<blockquote>\n<p><em>I hear its good so I'm only curious</em></p>\n</blockquote>\n<blockquote>\n<p><em>I hear its better than REST and i hate REST! SO LETS GO!</em></p>\n</blockquote>\n<p>(I can read minds that should be obvious now...i guess)</p>\n<p>No, I can't. I don't know why you are here but i hope to keep you here. </p>\n<p>GraphQL is an alternative way of getting data. An obviously better way because think about it... when you come to the game more than 10 years late you have to be bringing something amazing to the table before you can be accepted---as increasingly and widely has GraphQL is being accepted. In a quick series of posts (all short) I'll attempt to highlight the things GraphQL has brought to the table when it comes to querying for data we wish to display in our mobile and web apps.</p>\n<h2>1. The Multiple Endpoints Problem</h2>\n<p><strong>Lool, sorry what are endpoints again??</strong> An endpoint is simply a url somewhere (hey, a server. this somewhere is a server) that has the data you want. For example with the popular SWAPI(Star Wars API) you might be interested in knowing all the films they have in their database, so you curiously go to their documentation and you see where they tell you you can access it on this url\n<em><a href=\"https://swapi.dev/api/films\">https://swapi.dev/api/films</a></em> or lets say you are curious about the actors instead and again they tell you its also on their site but on this url instead <em><a href=\"https://swapi.dev/api/people\">https://swapi.dev/api/people</a></em>\nand...oh, wait did i just see John Boyega? <em><strong>chuckles</strong></em> he is not there, but lets say he was and you wanted information about say his eye colour, you would have to go to new url\n<em><a href=\"https://wapi.dev/api/people/:boyegas-id\">https://wapi.dev/api/people/:boyegas-id</a></em> to get that info and if you are like me these urls are getting way too may for just the small curiousity that brought me here, i'm not even a Star Wars fan like that. Anyway, even when you query for that endpoint, you will get more information more than what you need and all of this is just excessive. These Star Wars people have a GraphQL powered API lets see how we will ask for this same data using GraphQL query...</p>\n<p>Right click on this link <a href=\"http://graphql.org/swapi-graphql\">http://graphql.org/swapi-graphql</a>\nand open it in a new tab and copy and paste the query below</p>\n<pre><code>query{\n  person(id: \"boyega's-id\"){\n    eyeColor\n  }\n}\n</code></pre>\n<p>Haha. I told you he is not there so that would have thrown error. But try this one instead</p>\n<pre><code>query{\n  person(id: \"cGVvcGxlOjE=\"){\n    eyeColor\n  }\n}\n</code></pre>\n<p>You should get blue. That's Luke Skywalker's eye-colour. Blue. We don't do overfetching over here. ðŸ˜Ž. Bye.</p>","frontmatter":{"title":"Welcome to my blog!(Don't Leave Me ðŸ˜Š)","keywords":"developers"}}},"pageContext":{"slug":"/welcome/"}}}